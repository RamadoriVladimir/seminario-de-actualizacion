1. Single Responsibility Principle (SRP)

El componente XRequest cumple varias funciones al mismo tiempo:
-Maneja la UI (creación de tablas, modales, botones).
-Realiza la lógica de red (XMLHttpRequest, peticiones a la API).
-Controla la interacción del usuario (eventos de click, apertura/cierre de modal).
-Esto rompe parcialmente SRP, ya que una sola clase debería encargarse de una única responsabilidad o razon para cambiar.

Una mejora sería separar en distintas clases o módulos e inyectar dependencias en lugar de crear los elementos en el constructor.
De esta forma, cada clase tendría un único propósito y el código sería más mantenible.

2. Open/Closed Principle (OCP)
El código es cerrado a la extensión porque si quisiéramos cambiar la fuente de datos (otro endpoint o API distinta) o el modo de renderizado, habría que modificar directamente la clase XRequest.
Si quisieras usar otra API o cambiar las columnas de la tabla, tendrías que modificar el código fuente de la clase. No es extensible sin alterar su código interno, lo que va en contra del OCP.

3. Dependency Inversion Principle (DIP)
Actualmente, la clase XRequest depende directamente de detalles de implementación (XMLHttpRequest y DOM API). Esto rompe el principio, ya que la clase debería depender de abstracciones y no de implementaciones concretas.

Posibles mejoras:
Definir una interfaz o función externa para manejar las peticiones (fetchData(url)), de modo que el componente no dependa de XMLHttpRequest.

Conclusión:
El componente funciona pero tiene demasiadas responsabilidades, lo cual afecta SRP y DIP. Podría mejorarse separando la lógica en módulos especializados y permitiendo mayor extensibilidad (OCP).